[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gruta"
readme = "README.md"
dynamic = ["version"]
license = "Apache-2.0"
keywords = ["actor", "async", "asynchronous", "concurrency"]
description = 'Gruta is a Python implementation of the Simple Actor Model'
authors = [
  { name = "Evgenii Zhuravlev", email = "e.zhuravlev@netcon.ee" },
]

requires-python = ">=3.8"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Libraries",
  "License :: OSI Approved :: Apache Software License",
]
dependencies = [
]

[project.urls]
Source = "https://github.com/netconsolution/gruta"
Issues = "https://github.com/netconsolution/gruta/issues"
Changelog = "https://github.com/netconsolution/gruta#chandelog"
Documentation = "https://github.com/netconsolution/gruta#readme"


[tool.hatch.version]
path = "src/gruta/__version__.py"

[tool.hatch.build]
skip-excluded-dirs = true

[tool.hatch.build.targets.sdist]
include = [
    "/tests",
    "/src/gruta",
    "/README.md",
    "/CHANGELOG.md",
]
ignore-vcs = true

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "coverage[toml]>=6.5",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/gruta tests}"

[tool.coverage.run]
source_pkgs = ["gruta", "tests"]
branch = true
parallel = true
omit = [
  "src/gruta/__version__.py",
]

[tool.coverage.paths]
tests = ["tests", "*/gruta/tests"]
gruta = ["src/gruta", "*/gruta/src/gruta"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
